# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/
import tkinter as tk
from tkinter import ttk
from tkinter import*
from PIL import ImageTk
shrift=('Times New Roman', 15)
class tkinterApp(tk.Tk):
	def __init__(self, *args, **kwargs):
		tk.Tk.__init__(self, *args, **kwargs)
		container = tk.Frame(self) 
		container.pack(side = "top", fill = "both", expand = True) 
		container.grid_rowconfigure(0, weight = 1)
		container.grid_columnconfigure(0, weight = 1)
		self.frames = {} 
		for F in (Start, Glav, Glav1,Glav2, Tema1 ,Tema2, Tema3, Tema4, Tema5, Tema6):
			frame = F(container, self)
			self.frames[F] = frame 
			frame.grid(row = 0, column = 0, sticky ="nesw")
		self.show_frame(Start)
	def show_frame(self, cont):
		frame = self.frames[cont]
		frame.tkraise()
class Start(tk.Frame):
	def __init__(self, parent, controller):
		tk.Frame.__init__(self, parent)
		label = ttk.Label(self, text ='Инструкция по использованию "Калькулятор для лабораторных работ" \n1.Единицы измерения вводить в системе СИ \n2.Не целые числа вводить через "." Пример: 0.1. \n3.После ввода данных нажать кнопку"Ввести данные"', 
					font =('Times New Roman', 15),
					anchor=CENTER)
		label.grid(row = 0, column = 0, padx = 10, pady = 10)
		ttk.Style().theme_use("winnative")
		button2 = ttk.Button(self, text ="Начать работу", command = lambda : controller.show_frame(Glav))
		button2.grid(row = 10, column = 0, padx = 20, pady = 20)
		canvas = tk.Canvas(self, height=590, width=780)
		self.photo = ImageTk.PhotoImage(file = "F:/58.1.png")
		canvas.create_image(0, 0, anchor='nw',image=self.photo)
		canvas.grid(row=2,column=0)
class Glav(tk.Frame):
	def __init__(self, parent, controller):
		tk.Frame.__init__(self, parent)
		label = ttk.Label(self, text ="Выберете главу лабораторной работы:", 
					font = ('Times New Roman', 15))
		label.grid(row = 0, column = 6, padx = 10, pady = 10)
		button2 = ttk.Button(self, text ="1.Тепловые явления",
							command = lambda : controller.show_frame(Glav1))
		button2.grid(row = 2, column = 6, padx = 10, pady = 10)
		button3 = ttk.Button(self, text ="2.Электрические явления",
							command = lambda : controller.show_frame(Glav2))
		button3.grid(row = 4, column = 6, padx = 10, pady = 10)
		button4 = ttk.Button(self, text ="←Назад",
							command = lambda : controller.show_frame(Start))
		button4.grid(row = 5, column = 6, padx = 10, pady = 10)
		canvas = tk.Canvas(self, height=590, width=780)
		self.photo = ImageTk.PhotoImage(file = "F:/58.1.png")
		canvas.create_image(0, 0, anchor='nw',image=self.photo)
		canvas.grid(row=6,column=6)
class Glav1(tk.Frame):
	def __init__(self, parent, controller):
		tk.Frame.__init__(self, parent)
		label = ttk.Label(self, text ="Выберете тему лабораторной работы:", font = ('Times New Roman', 15))
		label.grid(row = 0, column = 6, padx = 10, pady = 10)
		button2 = ttk.Button(self, text ="1.Сравнение количества теплоты при смешивании воды разной температуры",
							command = lambda : controller.show_frame(Tema1))
		button2.grid(row = 2, column = 6, padx = 10, pady = 10)
		button3 = ttk.Button(self, text ="2.Измерение удельной теплоёмкости твёрдого тела",
							command = lambda : controller.show_frame(Tema2))
		button3.grid(row = 4, column = 6, padx = 10, pady = 10)
		button4= ttk.Button(self, text ="3.Измерение влажности воздуха",
							command = lambda : controller.show_frame(Tema3))
		button4.grid(row = 6, column = 6, padx = 10, pady = 10)
		button5 = ttk.Button(self, text ="←Назад",
							command = lambda : controller.show_frame(Glav))
		button5.grid(row = 7, column = 6, padx = 10, pady = 10)
		canvas = tk.Canvas(self, height=590, width=780)
		self.photo = ImageTk.PhotoImage(file = "D:/58.1.png")
		canvas.create_image(0, 0, anchor='nw',image=self.photo)
		canvas.grid(row=8,column=6)
class Glav2(tk.Frame):
	def __init__(self, parent, controller):
		tk.Frame.__init__(self, parent)
		label = ttk.Label(self, text ="Выберете тему лабораторной работы:", font = ('Times New Roman', 15))
		label.grid(row = 0, column = 6, padx = 10, pady = 10)
		button2 = ttk.Button(self, text ="1.Измерение напряжения на различных участках электрической цепи",
							command = lambda : controller.show_frame(Tema4))
		button2.grid(row = 2, column = 6, padx = 10, pady = 10)
		button3 = ttk.Button(self, text ="2.Измерение сопротивления проводника при помощи амперметра и вольтметра",
							command = lambda : controller.show_frame(Tema5))
		button3.grid(row = 4, column = 6, padx = 10, pady = 10)
		button4= ttk.Button(self, text ="3.Измерение мощности и работы тока в элктрической лампе",
							command = lambda : controller.show_frame(Tema6))
		button4.grid(row = 6, column = 6, padx = 10, pady = 10)
		button5 = ttk.Button(self, text ="←Назад",
							command = lambda : controller.show_frame(Glav))
		button5.grid(row = 7, column = 6, padx = 10, pady = 10)
		canvas = tk.Canvas(self, height=590, width=780)
		self.photo = ImageTk.PhotoImage(file = "D:/58.1.png")
		canvas.create_image(0, 0, anchor='nw',image=self.photo)
		canvas.grid(row=8,column=6)
class Tema1(tk.Frame):
	def __init__(self, parent, controller):
		tk.Frame.__init__(self, parent)
		def VVD():
			labl11.configure(text='Вывод: В ходе данной лабораторной работы мы определили количество теплоты, \nотданной горячей водой и полученной холодной при теплообмене.')
		def nexti1():
			mho=entr.get()
			mhoi=int(mho)
			mho1=(entr1.get())
			mhoi1=int(mho1)
			mho2=(entr2.get())
			mhoi2=int(mho2)
			mho3=(entr3.get())
			mhoi3=int(mho3)
			mho4=(entr4.get())
			mhoi4=int(mho4)
			c=4200
			Q1=c*mhoi*(mhoi1-mhoi4)
			Q2=c*mhoi2*(mhoi3-mhoi4)
			if Q1<0:
				Q1=Q1*-1
			if Q2<0:
				Q2=Q2*-1
			return Label(self, text=f'Масса горячей воды =  {mho} \nНачальная температура горячей воды =  {mho1} \nТемпература смеси =  {mho4} \nКоличество теплоты, отданное горячей водй = {Q1} \nМасса холодной воды =  {mho2} \nНачальная температура холодной воды =  {mho3} \nКоличество теплоты, полученное холодной водой =  {Q2}', pady=15, font=shrift).grid(row=6, columnspan=1)
		labl1=ttk.Label(self, text ='Введите массу горячей воды: ', font=shrift)
		labl2=ttk.Label(self, text ='Введите температуру горячей воды: ', font=shrift)
		labl3=ttk.Label(self, text ='Введите массу холодной воды: ', font=shrift)
		labl4=ttk.Label(self, text ='Введите температуру холодной воды: ', font=shrift)
		labl5=ttk.Label(self, text ='Введите температуру смеси: ', font=shrift)
		labl11=ttk.Label(self,text=' ', font=shrift)
		labl11.grid(row = 10, column = 4, padx = 10, pady = 10)
		labl1.grid(row = 0, column = 0, padx = 10, pady = 10)
		labl2.grid(row = 1, column = 0, padx = 10, pady = 10)
		labl3.grid(row = 2, column = 0, padx = 10, pady = 10)
		labl4.grid(row = 3, column = 0, padx = 10, pady = 10)
		labl5.grid(row = 4, column = 0, padx = 10, pady = 10)
		labl6=ttk.Label(self, text ='кг', font=shrift)
		labl7=ttk.Label(self, text ='°C', font=shrift)
		labl8=ttk.Label(self, text ='кг', font=shrift)
		labl9=ttk.Label(self, text ='°C', font=shrift)
		labl10=ttk.Label(self, text ='°C', font=shrift)
		labl6.grid(row = 0, column = 3, padx = 10, pady = 10)
		labl7.grid(row = 1, column = 3, padx = 10, pady = 10)
		labl8.grid(row = 2, column = 3, padx = 10, pady = 10)
		labl9.grid(row = 3, column = 3, padx = 10, pady = 10)
		labl10.grid(row = 4, column = 3, padx = 10, pady = 10)
		button6=ttk.Button(self, text='Показать вывод', command=VVD)
		button6.grid(row = 9, column = 1, padx = 10, pady = 10)
		button3 = ttk.Button(self, text ="Ввести данные", command=nexti1)
		button3.grid(row = 8, column = 0, padx = 10, pady = 10)
		entr=ttk.Entry(self, width=10)
		entr.grid(row = 0, column = 1, padx = 10, pady = 10)
		entr1=ttk.Entry(self, width=10)
		entr1.grid(row = 1, column = 1, padx = 10, pady = 10)
		entr2=ttk.Entry(self, width=10)
		entr2.grid(row = 2, column = 1, padx = 10, pady = 10)
		entr3=ttk.Entry(self, width=10)
		entr3.grid(row = 3, column = 1, padx = 10, pady = 10)
		entr4=ttk.Entry(self, width=10)
		entr4.grid(row = 4, column = 1, padx = 10, pady = 10)
		button5 = ttk.Button(self, text ="←Назад",
							command = lambda : controller.show_frame(Glav1))
		button5.grid(row = 9, column = 0, padx = 10, pady = 10)
		canvas = tk.Canvas(self, height=130, width=600)
		self.photo = ImageTk.PhotoImage(file = "F:/571.png")
		canvas.create_image(0, 0, anchor='nw',image=self.photo)
		canvas.grid(row=12,column=0)
class Tema2(tk.Frame):
	def __init__(self, parent, controller):
		tk.Frame.__init__(self, parent)
		def nexti2():
			mho=entr.get()
			mhoi=int(mho)
			mho1=(entr1.get())
			mhoi1=int(mho1)
			mho2=(entr2.get())
			mhoi2=int(mho2)
			mho3=(entr3.get())
			mhoi3=int(mho3)
			mho4=(entr4.get())
			mhoi4=int(mho4)
			c=4200
			Q1=c*mhoi*(mhoi3-mhoi1)
			c2=Q1 / (mhoi4*(mhoi2-mhoi3))
			Q2=c2*mhoi4*(mhoi2-mhoi3)
			if Q1<0:
				Q1=Q1*-1
			if Q2<0:
				Q2=Q2*-1
			return Label(self, text=f'Количество теплоты "Q1", которое вода получила при нагревании = {Q1} \nУдельная теплоёмкость вещества цилиндра "c2" = {c2}\nКоличество теплоты "Q2", отданное металическим цилиндром при охлаждении = {Q2}', pady=15,
				font=shrift).grid(row=7, columnspan=8)
		def VVD():
			labl11.configure(text='Вывод: В ходе данной лабораторной работы, мы определили, \nчто цилиндр изготовлен из алюминия')
		labl1=ttk.Label(self, text ='Введите массу воды в калориметре: ', font=shrift)
		labl2=ttk.Label(self, text ='Введите начальную температуру воды: ', font=shrift)
		labl3=ttk.Label(self, text ='Введите начальную температуру цилиндра: ', font=shrift)
		labl4=ttk.Label(self, text ='Введите температуру воды после опускания в неё цилиндра: ', font=shrift)
		labl5=ttk.Label(self, text ='Введите массу цилиндра: ', font=shrift)
		labl11=ttk.Label(self, text =' ', font=shrift)
		button6=ttk.Button(self, text='Показать вывод', command=VVD)
		button6.grid(row = 9, column = 7, padx = 10, pady = 10)
		labl11.grid(row = 10, column = 11, padx = 10, pady = 10)
		labl1.grid(row = 0, column = 6, padx = 10, pady = 10)
		labl2.grid(row = 1, column = 6, padx = 10, pady = 10)
		labl3.grid(row = 2, column = 6, padx = 10, pady = 10)
		labl4.grid(row = 3, column = 6, padx = 10, pady = 10)
		labl5.grid(row = 4, column = 6, padx = 10, pady = 10)
		labl6=ttk.Label(self, text ='кг', font=shrift)
		labl7=ttk.Label(self, text ='°C', font=shrift)
		labl8=ttk.Label(self, text ='°C', font=shrift)
		labl9=ttk.Label(self, text ='°C', font=shrift)
		labl10=ttk.Label(self, text ='кг', font=shrift)
		labl6.grid(row = 0, column = 8, padx = 10, pady = 10)
		labl7.grid(row = 1, column = 8, padx = 10, pady = 10)
		labl8.grid(row = 2, column = 8, padx = 10, pady = 10)
		labl9.grid(row = 3, column = 8, padx = 10, pady = 10)
		labl10.grid(row = 4, column = 8, padx = 10, pady = 10)
		button3 = ttk.Button(self, text ="Ввести данные", command = nexti2)
		button3.grid(row = 9, column = 6, padx = 10, pady = 10)
		entr=ttk.Entry(self, width=10)
		entr.grid(row = 0, column = 7, padx = 10, pady = 10)
		entr1=ttk.Entry(self, width=10)
		entr1.grid(row = 1, column = 7, padx = 10, pady = 10)
		entr2=ttk.Entry(self, width=10)
		entr2.grid(row = 2, column = 7, padx = 10, pady = 10)
		entr3=ttk.Entry(self, width=10)
		entr3.grid(row = 3, column = 7, padx = 10, pady = 10)
		entr4=ttk.Entry(self, width=10)
		entr4.grid(row = 4, column = 7, padx = 10, pady = 10)
		canvas = tk.Canvas(self, height=376, width=600)
		self.photo = ImageTk.PhotoImage(file = "F:/51.png")
		canvas.create_image(0, 0, anchor='nw',image=self.photo)
		canvas.grid(row=2,column=11)
		button5 = ttk.Button(self, text ="←Назад",
							command = lambda : controller.show_frame(Glav1))
		button5.grid(row = 10, column = 6, padx = 10, pady = 10)
class Tema3(tk.Frame):
	def __init__(self, parent, controller):
		tk.Frame.__init__(self, parent)
		def VVD():
			labl11.configure(text='Вывод: В ходе данной лабораторной работы \nмы измерили влажность воздуха в классе')
		def nexti3():
			mho=entr.get()
			mhoi=int(mho)
			mho1=(entr1.get())
			mhoi1=int(mho1)
			mho2=(entr2.get())
			mhoi2=int(mho2)
			Dt = mhoi - mhoi1
			return Label(self, text=f'\nПоказания сухого термометра(t) ={mhoi} \nПоказания намокшего термометра(t вл) = {mhoi1}\nРазность температур(Δt) = {Dt} \nОтносительная влажность (φ) = {mhoi2}%', pady=15, font=shrift).grid(row=6, columnspan=8)
		labl1=ttk.Label(self, text ='Введите показания сухого термометра: ', font=shrift)
		labl2=ttk.Label(self, text ='Введите показания намокшего термометра: ', font=shrift)
		labl3=ttk.Label(self, text ='Введите относительную влажность воздуха (φ) \nпо психрометрической теблице\nПоказания     | Разность показаний сухого и влажного термометров, °C \nсухого термо-|  0  1  2  3  4  5  6  7  8  9  10 \nметра, °C      |    Относительная влажность, % \n   0                | 100 81 63 45 28 11 -  -  -  -  - \n   4                | 100 85 70 56 42 28 14 -  -  -  - \n   2                | 100 84 68 51 35 20 -  -  -  -  - \n   6                | 100 86 73 60 74 35 23 10 -  -  - \n   8                | 100 87 75 63 51 40 28 18 7  -  - \n   10              | 100 88 76 65 54 44 34 24 14 5  -  \n   12              | 100 89 78 68 57 48 38 29 20 11 - \n   14              | 100 89 79 70 60 51 42 34 25 17 9 \n   16              | 100 90 81 71 62 54 46 37 30 22 15 \n   18              | 100 91 82 73 65 56 49 41 34 27 20 \n   20              | 100 91 83 71 66 59 51 44 37 30 24 \n   22              | 100 92 83 76 68 61 54 74 40 34 28 \n   24              | 100 92 84 77 69 62 56 49 43 37 31 \n   26              | 100 92 85 78 71 64 58 51 46 40 34 \n   28              | 100 93 85 78 72 65 59 53 48 42 37 \n   30              | 100 93 86 79 73 67 61 55 50 44 39 ', font=shrift)
		labl1.grid(row = 0, column = 6, padx = 10, pady = 10)
		labl2.grid(row = 1, column = 6, padx = 10, pady = 10)
		labl3.grid(row = 2, column = 6, padx = 10, pady = 10)
		labl4=ttk.Label(self, text ='°C', font=shrift)
		labl5=ttk.Label(self, text ='°C', font=shrift)
		labl6=ttk.Label(self, text ='%', font=shrift)
		labl4.grid(row = 0, column = 8, padx = 10, pady = 10)
		labl5.grid(row = 1, column = 8, padx = 10, pady = 10)
		labl6.grid(row = 2, column = 8, padx = 10, pady = 10)
		button3 = ttk.Button(self, text ="Ввести данные",command=nexti3)
		button3.grid(row = 7, column = 6, padx = 10, pady = 10)
		button6=ttk.Button(self, text='Показать вывод', command=VVD)
		button6.grid(row = 7, column = 7, padx = 10, pady = 10)
		entr=ttk.Entry(self, width=10)
		entr.grid(row = 0, column = 7, padx = 10, pady = 10)
		entr1=ttk.Entry(self, width=10)
		entr1.grid(row = 1, column = 7, padx = 10, pady = 10)
		entr2=ttk.Entry(self, width=10)
		entr2.grid(row = 2, column = 7, padx = 10, pady = 10)
		canvas = tk.Canvas(self, height=400, width=700)
		self.photo = ImageTk.PhotoImage(file = "D:/10.1.png")
		canvas.create_image(0, 0, anchor='nw',image=self.photo)
		canvas.grid(row=2,column=10)
		button5 = ttk.Button(self, text ="←Назад",
							command = lambda : controller.show_frame(Glav1))
		button5.grid(row = 8, column = 6, padx = 10, pady = 10)
		labl11=ttk.Label(self, text =' ', font=shrift)
		labl11.grid(row = 3, column = 10, padx = 10, pady = 10)
class Tema4(tk.Frame):
	def __init__(self, parent, controller):
		tk.Frame.__init__(self, parent)
		def VVD():
			labl11.configure(text='Вывод: В ходе данной лабораторной работы мы убедились, что сила тока \nв различных последовательно соединённых участках цепи одинакова.')
		def nexti4():
			mho=entr.get()
			mhoi=int(mho)
			mho1=(entr1.get())
			mhoi1=int(mho1)
			mho2=(entr2.get())
			mhoi2=int(mho2)
			U3= mhoi + mhoi1
			U4=mhoi2 - U3
			if U4 == 0:
				texti='Разниза между напряжением на концах резисторов и на участке цепи = '
			if U4 < 0:
				U4 = U4*-1
				texti ='Напряжение на концах резиторов больше чем напряжение на участке цепи на '
			if U4>0:
				texti ='Напряжение на участке цепи больше напряжения на концах резистороов на '
			return Label(self, text=f'Сумма напряжений на обоих резисторах = {U3} \n{texti} {U4} В', pady=15, font=shrift).grid(row=6, columnspan=8)
		labl1=ttk.Label(self, text ='Введите напряжение на конце 1 резистора "U1": ', font=shrift)
		labl2=ttk.Label(self, text ='Введите напряжение на конце 2 резистора "U2": ', font=shrift)
		labl3=ttk.Label(self, text ='Введите напряжение на участке цепи, состоящем из двух резисторов "U": ', font=shrift)
		labl1.grid(row = 0, column = 6, padx = 10, pady = 10)
		labl2.grid(row = 1, column = 6, padx = 10, pady = 10)
		labl3.grid(row = 2, column = 6, padx = 10, pady = 10)
		labl4=ttk.Label(self, text ='В', font=shrift)
		labl5=ttk.Label(self, text ='В', font=shrift)
		labl6=ttk.Label(self, text ='В', font=shrift)
		labl4.grid(row = 0, column = 8, padx = 10, pady = 10)
		labl5.grid(row = 1, column = 8, padx = 10, pady = 10)
		labl6.grid(row = 2, column = 8, padx = 10, pady = 10)
		labl11=ttk.Label(self, text =' ', font=shrift)
		button6=ttk.Button(self, text='Показать вывод', command=VVD)
		button6.grid(row = 5, column = 7, padx = 10, pady = 10)
		labl11.grid(row = 3, column = 10, padx = 10, pady = 10)
		entr=ttk.Entry(self, width=10)
		entr.grid(row = 0, column = 7, padx = 10, pady = 10)
		entr1=ttk.Entry(self, width=10)
		entr1.grid(row = 1, column = 7, padx = 10, pady = 10)
		entr2=ttk.Entry(self, width=10)
		entr2.grid(row = 2, column = 7, padx = 10, pady = 10)
		button3 = ttk.Button(self, text ="Ввести данные",command=nexti4)
		button3.grid(row = 5, column = 6, padx = 10, pady = 10)
		canvas = tk.Canvas(self, height=200, width=700)
		self.photo = ImageTk.PhotoImage(file = "F:/2022.png")
		canvas.create_image(0, 0, anchor='nw',image=self.photo)
		canvas.grid(row=2,column=10)
		button5 = ttk.Button(self, text ="←Назад",
							command = lambda : controller.show_frame(Glav2))
		button5.grid(row = 6, column = 6, padx = 10, pady = 10)
class Tema5(tk.Frame):
	def __init__(self, parent, controller):
		tk.Frame.__init__(self, parent)
		def VVD():
			labl11.configure(text='Вывод: В ходе данной лабораторной работы мы научились измерять \nсопротивление проводника при помощи амперметра и вольтметра. Убедились \nна опыте, что сопротивление проводника не зависит от силы тока в нём и \nнапряжение на его концах.')
		def nexti5():
			mho=entr.get()
			mhoi=int(mho)
			mho1=(entr1.get())
			mhoi1=int(mho1)
			mho2=(entr2.get())
			mhoi2=int(mho2)
			mho3=(entr3.get())
			mhoi3=int(mho3)
			R1= mhoi1 / mhoi
			R2 = mhoi3 / mhoi2
			return Label(self, text=f'Опыт №1 \nСила тока в первом опыте "I1" = {mhoi} A \nНапряжение в первом опыте "U1" = {mhoi1} В \nСопротивление в первом опыте "R1" = {R1} Ом \nОпыт №2 \nСила тока во втором опыте "I2" = {mhoi2} A \nНапряжение во втором опыте "U2" = {mhoi3} В \nСопротивление во втором опыте "R2" = {R2} Ом', pady=15, font=shrift).grid(row=7, columnspan=8)
		labl1=ttk.Label(self, text ='Введите первую силу тока "I1": ', font=shrift)
		labl2=ttk.Label(self, text ='Введите первое напряжение "U1": ', font=shrift)
		labl3=ttk.Label(self, text ='Введите вторую силу тока "I2": ', font=shrift)
		labl4=ttk.Label(self, text ='Введите второе напряжение "U2": ', font=shrift)
		labl11=ttk.Label(self, text =' ', font=shrift)
		button6=ttk.Button(self, text='Показать вывод', command=VVD)
		button6.grid(row = 5, column = 7, padx = 10, pady = 10)
		labl11.grid(row = 3, column = 10, padx = 10, pady = 10)
		labl1.grid(row = 0, column = 6, padx = 10, pady = 10)
		labl2.grid(row = 1, column = 6, padx = 10, pady = 10)
		labl3.grid(row = 2, column = 6, padx = 10, pady = 10)
		labl4.grid(row = 3, column = 6, padx = 10, pady = 10)
		labl5=ttk.Label(self, text ='А', font=shrift)
		labl6=ttk.Label(self, text ='В', font=shrift)
		labl7=ttk.Label(self, text ='А', font=shrift)
		labl8=ttk.Label(self, text ='В', font=shrift)
		labl5.grid(row = 0, column = 8, padx = 10, pady = 10)
		labl6.grid(row = 1, column = 8, padx = 10, pady = 10)
		labl7.grid(row = 2, column = 8, padx = 10, pady = 10)
		labl8.grid(row = 3, column = 8, padx = 10, pady = 10)
		button3 = ttk.Button(self, text ="Ввести данные", command=nexti5)
		button3.grid(row = 5, column = 6, padx = 10, pady = 10)
		entr=ttk.Entry(self, width=10)
		entr.grid(row = 0, column = 7, padx = 10, pady = 10)
		entr1=ttk.Entry(self, width=10)
		entr1.grid(row = 1, column = 7, padx = 10, pady = 10)
		entr2=ttk.Entry(self, width=10)
		entr2.grid(row = 2, column = 7, padx = 10, pady = 10)
		entr3=ttk.Entry(self, width=10)
		entr3.grid(row = 3, column = 7, padx = 10, pady = 10)
		canvas = tk.Canvas(self, height=255, width=600)
		self.photo = ImageTk.PhotoImage(file = "F:/982.png")
		canvas.create_image(0, 0, anchor='nw',image=self.photo)
		canvas.grid(row=2,column=10)
		button5 = ttk.Button(self, text ="←Назад",
							command = lambda : controller.show_frame(Glav2))
		button5.grid(row = 6, column = 6, padx = 10, pady = 10)
class Tema6(tk.Frame):
	def __init__(self, parent, controller):
		tk.Frame.__init__(self, parent)
		def VVD():
			labl11.configure(text='Вывод: В ходе данной лабораторной работы мы научились определять \nмощьность и работу тока в лампе, используя амперметр, вольтметр и часы, \nтак же выяснили, что полученное значение мощности совпадает с мощностью, \nобозначенной на лампе')
		def nexti6():
			mho=entr.get()
			mhoi=int(mho)
			mho1=(entr1.get())
			mhoi1=int(mho1)
			mho2=(entr2.get())
			mhoi2=int(mho2)
			mho3=(entr3.get())
			mhoi3=int(mho3)
			P= mhoi * mhoi1
			P1 = P - mhoi3
			A = P * mhoi2
			if P1 == 0:
				texti = 'Мощность в лампе равна мощности записаной на ней'
			if P1<0:
				P1=P1*-1
				texti = 'Мощность в лампе меньше чем написано на ней на '
			if P1 >0:
				texti ='Мощность в лампе больше чем написано на ней на '
			return Label(self, text=f'Мощность в лампе = {P} Вт \nМощность написаная на лампе = {mhoi3} Вт \n{texti} {P1} Вт \nРабота тока в лампе = {A} Дж', pady=15, font=shrift).grid(row=7, columnspan=8)
		labl1=ttk.Label(self, text ='Введите напряжение в лампе "U": ', font=shrift)
		labl2=ttk.Label(self, text ='Введите силу тока с амперметра "I": ', font=shrift)
		labl3=ttk.Label(self, text ='Введите время горения лампы: ', font=shrift)
		labl4=ttk.Label(self, text ='Введите мощность записаную на лампе "P": ', font=shrift)
		labl11=ttk.Label(self, text =' ', font=shrift)
		button6=ttk.Button(self, text='Показать вывод', command=VVD)
		button6.grid(row = 5, column = 8, padx = 10, pady = 10)
		labl11.grid(row = 3, column = 10, padx = 10, pady = 10)
		labl1.grid(row = 0, column = 6, padx = 10, pady = 10)
		labl2.grid(row = 1, column = 6, padx = 10, pady = 10)
		labl3.grid(row = 2, column = 6, padx = 10, pady = 10)
		labl4.grid(row = 3, column = 6, padx = 10, pady = 10)
		labl5=ttk.Label(self, text ='В', font=shrift)
		labl6=ttk.Label(self, text ='А', font=shrift)
		labl7=ttk.Label(self, text ='с', font=shrift)
		labl8=ttk.Label(self, text ='Вт', font=shrift)
		labl5.grid(row = 0, column = 8, padx = 10, pady = 10)
		labl6.grid(row = 1, column = 8, padx = 10, pady = 10)
		labl7.grid(row = 2, column = 8, padx = 10, pady = 10)
		labl8.grid(row = 3, column = 8, padx = 10, pady = 10)
		button3 = ttk.Button(self, text ="Ввести данные", command = nexti6)
		button3.grid(row = 5, column = 6, padx = 10, pady = 10)
		entr=ttk.Entry(self, width=10)
		entr.grid(row = 0, column = 7, padx = 10, pady = 10)
		entr1=ttk.Entry(self, width=10)
		entr1.grid(row = 1, column = 7, padx = 10, pady = 10)
		entr2=ttk.Entry(self, width=10)
		entr2.grid(row = 2, column = 7, padx = 10, pady = 10)
		entr3=ttk.Entry(self, width=10)
		entr3.grid(row = 3, column = 7, padx = 10, pady = 10)
		canvas = tk.Canvas(self, height=150, width=700)
		self.photo = ImageTk.PhotoImage(file = "F:/66.png")
		canvas.create_image(0, 0, anchor='nw',image=self.photo)
		canvas.grid(row=2,column=10)
		button5 = ttk.Button(self, text ="←Назад",
							command = lambda : controller.show_frame(Glav2))
		button5.grid(row = 6, column = 6, padx = 10, pady = 10)
app = tkinterApp()
app.title('Калькулятор для лабораторных работ')
app.mainloop()
